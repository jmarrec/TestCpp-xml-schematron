<sch:schema xmlns:sch='http://purl.oclc.org/dsdl/schematron'>
  <sch:title>HPXML Schematron Validator: HPXML.xsd</sch:title>
  <!-- <sch:ns uri='http://hpxmlonline.com/2019/10' prefix='h'/> -->
  <sch:pattern name="Test attribute">
    <sch:rule context='/HPXML/XMLTransactionHeaderInformation'>
      <sch:assert role='ERROR' test='Transaction[text()="create" or text()="update"] or not(Transaction)'>Expected Transaction to be 'create' or 'update'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/Site'>
      <sch:assert role='ERROR' test='eGridRegion[text()="Alaska" or text()="Eastern" or text()="ERCOT" or text()="Hawaii" or text()="Western" or text()="Puerto Rico"] or not(eGridRegion)'>Expected eGridRegion to be 'Alaska' or 'Eastern' or 'ERCOT' or 'Hawaii' or 'Western' or 'Puerto Rico'</sch:assert>
      <sch:assert role='ERROR' test='eGridSubregion[text()="AKGD" or text()="AKMS" or text()="AZNM" or text()="CAMX" or text()="ERCT" or text()="FRCC" or text()="HIMS" or text()="HIOA" or text()="MROE" or text()="MROW" or text()="NEWE" or text()="NWPP" or text()="NYCW" or text()="NYLI" or text()="NYUP" or text()="PRMS" or text()="RFCE" or text()="RFCM" or text()="RFCW" or text()="RMPA" or text()="SPNO" or text()="SPSO" or text()="SRMV" or text()="SRMW" or text()="SRSO" or text()="SRTV" or text()="SRVC"] or not(eGridSubregion)'>Expected eGridSubregion to be 'AKGD' or 'AKMS' or 'AZNM' or 'CAMX' or 'ERCT' or 'FRCC' or 'HIMS' or 'HIOA' or 'MROE' or 'MROW' or 'NEWE' or 'NWPP' or 'NYCW' or 'NYLI' or 'NYUP' or 'PRMS' or 'RFCE' or 'RFCM' or 'RFCW' or 'RMPA' or 'SPNO' or 'SPSO' or 'SRMV' or 'SRMW' or 'SRSO' or 'SRTV' or 'SRVC'</sch:assert>
      <sch:assert role='ERROR' test='CambiumRegionGEA[text()="AZNMc" or text()="CAMXc" or text()="ERCTc" or text()="FRCCc" or text()="MROEc" or text()="MROWc" or text()="NEWEc" or text()="NWPPc" or text()="NYSTc" or text()="RFCEc" or text()="RFCMc" or text()="RFCWc" or text()="RMPAc" or text()="SPNOc" or text()="SPSOc" or text()="SRMVc" or text()="SRMWc" or text()="SRSOc" or text()="SRTVc" or text()="SRVCc"] or not(CambiumRegionGEA)'>Expected CambiumRegionGEA to be 'AZNMc' or 'CAMXc' or 'ERCTc' or 'FRCCc' or 'MROEc' or 'MROWc' or 'NEWEc' or 'NWPPc' or 'NYSTc' or 'RFCEc' or 'RFCMc' or 'RFCWc' or 'RMPAc' or 'SPNOc' or 'SPSOc' or 'SRMVc' or 'SRMWc' or 'SRSOc' or 'SRTVc' or 'SRVCc'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/ProjectStatus'>
      <sch:assert role='ERROR' test='EventType[text()="audit" or text()="proposed workscope" or text()="approved workscope" or text()="construction-period testing/daily test out" or text()="job completion testing/final inspection" or text()="quality assurance/monitoring" or text()="preconstruction"] or not(EventType)'>Expected EventType to be 'audit' or 'proposed workscope' or 'approved workscope' or 'construction-period testing/daily test out' or 'job completion testing/final inspection' or 'quality assurance/monitoring' or 'preconstruction'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/BuildingSummary/Site'>
      <sch:assert role='ERROR' test='SiteType[text()="rural" or text()="suburban" or text()="urban"] or not(SiteType)'>Expected SiteType to be 'rural' or 'suburban' or 'urban'</sch:assert>
      <sch:assert role='ERROR' test='Surroundings[text()="stand-alone" or text()="attached on one side" or text()="attached on two sides" or text()="attached on three sides"] or not(Surroundings)'>Expected Surroundings to be 'stand-alone' or 'attached on one side' or 'attached on two sides' or 'attached on three sides'</sch:assert>
      <sch:assert role='ERROR' test='VerticalSurroundings[text()="unit above" or text()="unit below" or text()="unit above and below" or text()="no units above or below"] or not(VerticalSurroundings)'>Expected VerticalSurroundings to be 'unit above' or 'unit below' or 'unit above and below' or 'no units above or below'</sch:assert>
      <sch:assert role='ERROR' test='ShieldingofHome[text()="well-shielded" or text()="normal" or text()="exposed"] or not(ShieldingofHome)'>Expected ShieldingofHome to be 'well-shielded' or 'normal' or 'exposed'</sch:assert>
      <sch:assert role='ERROR' test='number(AzimuthOfFrontOfHome) &gt;= 0 or not(AzimuthOfFrontOfHome)'>Expected AzimuthOfFrontOfHome to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(AzimuthOfFrontOfHome) &lt; 360 or not(AzimuthOfFrontOfHome)'>Expected AzimuthOfFrontOfHome to be less than 360</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/BuildingSummary/Site/FuelTypesAvailable'>
      <sch:assert role='ERROR' test='Fuel[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(Fuel)'>Expected Fuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/BuildingSummary/BuildingOccupancy'>
      <sch:assert role='ERROR' test='number(NumberofResidents) &gt;= 0 or not(NumberofResidents)'>Expected NumberofResidents to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/BuildingSummary/BuildingConstruction'>
      <sch:assert role='ERROR' test='ResidentialFacilityType[text()="single-family detached" or text()="single-family attached" or text()="manufactured home" or text()="2-4 unit building" or text()="5+ unit building" or text()="multi-family - uncategorized" or text()="multi-family - town homes" or text()="multi-family - condos" or text()="apartment unit" or text()="studio unit" or text()="other" or text()="unknown"] or not(ResidentialFacilityType)'>Expected ResidentialFacilityType to be 'single-family detached' or 'single-family attached' or 'manufactured home' or '2-4 unit building' or '5+ unit building' or 'multi-family - uncategorized' or 'multi-family - town homes' or 'multi-family - condos' or 'apartment unit' or 'studio unit' or 'other' or 'unknown'</sch:assert>
      <sch:assert role='ERROR' test='number(NumberofConditionedFloors) &gt;= 0 or not(NumberofConditionedFloors)'>Expected NumberofConditionedFloors to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(NumberofConditionedFloorsAboveGrade) &gt;= 0 or not(NumberofConditionedFloorsAboveGrade)'>Expected NumberofConditionedFloorsAboveGrade to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(AverageCeilingHeight) &gt;= 0 or not(AverageCeilingHeight)'>Expected AverageCeilingHeight to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(NumberofBedrooms) &gt;= 0 or not(NumberofBedrooms)'>Expected NumberofBedrooms to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(NumberofBathrooms) &gt; 0 or not(NumberofBathrooms)'>Expected NumberofBathrooms to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(ConditionedFloorArea) &gt; 0 or not(ConditionedFloorArea)'>Expected ConditionedFloorArea to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(ConditionedBuildingVolume) &gt; 0 or not(ConditionedBuildingVolume)'>Expected ConditionedBuildingVolume to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/ClimateandRiskZones/ClimateZoneIECC'>
      <sch:assert role='ERROR' test='Year[text()="2021" or text()="2018" or text()="2015" or text()="2012" or text()="2009" or text()="2006" or text()="2003"] or not(Year)'>Expected Year to be '2021' or '2018' or '2015' or '2012' or '2009' or '2006' or '2003'</sch:assert>
      <sch:assert role='ERROR' test='ClimateZone[text()="1A" or text()="1B" or text()="1C" or text()="2A" or text()="2B" or text()="2C" or text()="3A" or text()="3B" or text()="3C" or text()="4A" or text()="4B" or text()="4C" or text()="5A" or text()="5B" or text()="5C" or text()="6A" or text()="6B" or text()="6C" or text()="7" or text()="8"] or not(ClimateZone)'>Expected ClimateZone to be '1A' or '1B' or '1C' or '2A' or '2B' or '2C' or '3A' or '3B' or '3C' or '4A' or '4B' or '4C' or '5A' or '5B' or '5C' or '6A' or '6B' or '6C' or '7' or '8'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/AirInfiltration/AirInfiltrationMeasurement'>
      <sch:assert role='ERROR' test='number(HousePressure) &gt; 0 or not(HousePressure)'>Expected HousePressure to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/AirInfiltration/AirInfiltrationMeasurement/BuildingAirLeakage'>
      <sch:assert role='ERROR' test='UnitofMeasure[text()="CFM" or text()="CFMnatural" or text()="ACH" or text()="ACHnatural"] or not(UnitofMeasure)'>Expected UnitofMeasure to be 'CFM' or 'CFMnatural' or 'ACH' or 'ACHnatural'</sch:assert>
      <sch:assert role='ERROR' test='number(AirLeakage) &gt; 0 or not(AirLeakage)'>Expected AirLeakage to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Attics/Attic/VentilationRate'>
      <sch:assert role='ERROR' test='UnitofMeasure[text()="SLA" or text()="ACHnatural" or text()="CFM per sq.ft."] or not(UnitofMeasure)'>Expected UnitofMeasure to be 'SLA' or 'ACHnatural' or 'CFM per sq.ft.'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt; 0 or not(Value)'>Expected Value to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Foundations/Foundation/VentilationRate'>
      <sch:assert role='ERROR' test='UnitofMeasure[text()="SLA" or text()="ACHnatural" or text()="CFM per sq.ft."] or not(UnitofMeasure)'>Expected UnitofMeasure to be 'SLA' or 'ACHnatural' or 'CFM per sq.ft.'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt; 0 or not(Value)'>Expected Value to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Roofs/Roof'>
      <sch:assert role='ERROR' test='InteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(InteriorAdjacentTo)'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='RoofType[text()="shingles" or text()="slate or tile shingles" or text()="wood shingles or shakes" or text()="asphalt or fiberglass shingles" or text()="metal surfacing" or text()="expanded polystyrene sheathing" or text()="plastic/rubber/synthetic sheeting" or text()="concrete" or text()="cool roof" or text()="green roof" or text()="no one major type" or text()="other"] or not(RoofType)'>Expected RoofType to be 'shingles' or 'slate or tile shingles' or 'wood shingles or shakes' or 'asphalt or fiberglass shingles' or 'metal surfacing' or 'expanded polystyrene sheathing' or 'plastic/rubber/synthetic sheeting' or 'concrete' or 'cool roof' or 'green roof' or 'no one major type' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='RoofColor[text()="light" or text()="medium" or text()="medium dark" or text()="dark" or text()="reflective"] or not(RoofColor)'>Expected RoofColor to be 'light' or 'medium' or 'medium dark' or 'dark' or 'reflective'</sch:assert>
      <sch:assert role='ERROR' test='number(SolarAbsorptance) &gt;= 0 or not(SolarAbsorptance)'>Expected SolarAbsorptance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SolarAbsorptance) &lt;= 1 or not(SolarAbsorptance)'>Expected SolarAbsorptance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(Emittance) &gt;= 0 or not(Emittance)'>Expected Emittance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Emittance) &lt;= 1 or not(Emittance)'>Expected Emittance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(Pitch) &gt;= 0 or not(Pitch)'>Expected Pitch to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(RadiantBarrierGrade) &gt;= 1 or not(RadiantBarrierGrade)'>Expected RadiantBarrierGrade to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(RadiantBarrierGrade) &lt;= 3 or not(RadiantBarrierGrade)'>Expected RadiantBarrierGrade to be less than or equal to 3</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Roofs/Roof/InteriorFinish'>
      <sch:assert role='ERROR' test='Type[text()="gypsum board" or text()="gypsum composite board" or text()="plaster" or text()="wood" or text()="other" or text()="none"] or not(Type)'>Expected Type to be 'gypsum board' or 'gypsum composite board' or 'plaster' or 'wood' or 'other' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='number(Thickness) &gt;= 0 or not(Thickness)'>Expected Thickness to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Roofs/Roof/Insulation'>
      <sch:assert role='ERROR' test='number(AssemblyEffectiveRValue) &gt; 0 or not(AssemblyEffectiveRValue)'>Expected AssemblyEffectiveRValue to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/RimJoists/RimJoist'>
      <sch:assert role='ERROR' test='ExteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(ExteriorAdjacentTo)'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='InteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(InteriorAdjacentTo)'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='Siding[text()="wood siding" or text()="stucco" or text()="synthetic stucco" or text()="vinyl siding" or text()="aluminum siding" or text()="brick veneer" or text()="asbestos siding" or text()="fiber cement siding" or text()="composite shingle siding" or text()="masonite siding" or text()="other" or text()="none"] or not(Siding)'>Expected Siding to be 'wood siding' or 'stucco' or 'synthetic stucco' or 'vinyl siding' or 'aluminum siding' or 'brick veneer' or 'asbestos siding' or 'fiber cement siding' or 'composite shingle siding' or 'masonite siding' or 'other' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='Color[text()="light" or text()="medium" or text()="medium dark" or text()="dark" or text()="reflective"] or not(Color)'>Expected Color to be 'light' or 'medium' or 'medium dark' or 'dark' or 'reflective'</sch:assert>
      <sch:assert role='ERROR' test='number(SolarAbsorptance) &gt;= 0 or not(SolarAbsorptance)'>Expected SolarAbsorptance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SolarAbsorptance) &lt;= 1 or not(SolarAbsorptance)'>Expected SolarAbsorptance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(Emittance) &gt;= 0 or not(Emittance)'>Expected Emittance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Emittance) &lt;= 1 or not(Emittance)'>Expected Emittance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/RimJoists/RimJoist/Insulation'>
      <sch:assert role='ERROR' test='number(AssemblyEffectiveRValue) &gt; 0 or not(AssemblyEffectiveRValue)'>Expected AssemblyEffectiveRValue to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Walls/Wall'>
      <sch:assert role='ERROR' test='ExteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(ExteriorAdjacentTo)'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='InteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(InteriorAdjacentTo)'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='AtticWallType[text()="gable" or text()="knee wall" or text()="other"] or not(AtticWallType)'>Expected AtticWallType to be 'gable' or 'knee wall' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='Siding[text()="wood siding" or text()="stucco" or text()="synthetic stucco" or text()="vinyl siding" or text()="aluminum siding" or text()="brick veneer" or text()="asbestos siding" or text()="fiber cement siding" or text()="composite shingle siding" or text()="masonite siding" or text()="other" or text()="none"] or not(Siding)'>Expected Siding to be 'wood siding' or 'stucco' or 'synthetic stucco' or 'vinyl siding' or 'aluminum siding' or 'brick veneer' or 'asbestos siding' or 'fiber cement siding' or 'composite shingle siding' or 'masonite siding' or 'other' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='Color[text()="light" or text()="medium" or text()="medium dark" or text()="dark" or text()="reflective"] or not(Color)'>Expected Color to be 'light' or 'medium' or 'medium dark' or 'dark' or 'reflective'</sch:assert>
      <sch:assert role='ERROR' test='number(SolarAbsorptance) &gt;= 0 or not(SolarAbsorptance)'>Expected SolarAbsorptance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SolarAbsorptance) &lt;= 1 or not(SolarAbsorptance)'>Expected SolarAbsorptance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(Emittance) &gt;= 0 or not(Emittance)'>Expected Emittance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Emittance) &lt;= 1 or not(Emittance)'>Expected Emittance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Walls/Wall/InteriorFinish'>
      <sch:assert role='ERROR' test='Type[text()="gypsum board" or text()="gypsum composite board" or text()="plaster" or text()="wood" or text()="other" or text()="none"] or not(Type)'>Expected Type to be 'gypsum board' or 'gypsum composite board' or 'plaster' or 'wood' or 'other' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='number(Thickness) &gt;= 0 or not(Thickness)'>Expected Thickness to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Walls/Wall/Insulation'>
      <sch:assert role='ERROR' test='number(AssemblyEffectiveRValue) &gt; 0 or not(AssemblyEffectiveRValue)'>Expected AssemblyEffectiveRValue to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FoundationWalls/FoundationWall'>
      <sch:assert role='ERROR' test='ExteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(ExteriorAdjacentTo)'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='InteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(InteriorAdjacentTo)'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='Type[text()="solid concrete" or text()="concrete block" or text()="concrete block foam core" or text()="concrete block vermiculite core" or text()="concrete block perlite core" or text()="concrete block solid core" or text()="double brick" or text()="wood"] or not(Type)'>Expected Type to be 'solid concrete' or 'concrete block' or 'concrete block foam core' or 'concrete block vermiculite core' or 'concrete block perlite core' or 'concrete block solid core' or 'double brick' or 'wood'</sch:assert>
      <sch:assert role='ERROR' test='number(Length) &gt;= 0 or not(Length)'>Expected Length to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Height) &gt;= 0 or not(Height)'>Expected Height to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='number(Thickness) &gt;= 0 or not(Thickness)'>Expected Thickness to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(DepthBelowGrade) &gt;= 0 or not(DepthBelowGrade)'>Expected DepthBelowGrade to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FoundationWalls/FoundationWall/InteriorFinish'>
      <sch:assert role='ERROR' test='Type[text()="gypsum board" or text()="gypsum composite board" or text()="plaster" or text()="wood" or text()="other" or text()="none"] or not(Type)'>Expected Type to be 'gypsum board' or 'gypsum composite board' or 'plaster' or 'wood' or 'other' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='number(Thickness) &gt;= 0 or not(Thickness)'>Expected Thickness to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FoundationWalls/FoundationWall/Insulation/Layer'>
      <sch:assert role='ERROR' test='number(DistanceToTopOfInsulation) &gt;= 0 or not(DistanceToTopOfInsulation)'>Expected DistanceToTopOfInsulation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(DistanceToBottomOfInsulation) &gt;= 0 or not(DistanceToBottomOfInsulation)'>Expected DistanceToBottomOfInsulation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='InstallationType[text()="cavity" or text()="continuous" or text()="continuous - interior" or text()="continuous - exterior"] or not(InstallationType)'>Expected InstallationType to be 'cavity' or 'continuous' or 'continuous - interior' or 'continuous - exterior'</sch:assert>
      <sch:assert role='ERROR' test='number(NominalRValue) &gt;= 0 or not(NominalRValue)'>Expected NominalRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FoundationWalls/FoundationWall/Insulation'>
      <sch:assert role='ERROR' test='number(AssemblyEffectiveRValue) &gt; 0 or not(AssemblyEffectiveRValue)'>Expected AssemblyEffectiveRValue to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FrameFloors/FrameFloor'>
      <sch:assert role='ERROR' test='ExteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(ExteriorAdjacentTo)'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='InteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(InteriorAdjacentTo)'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FrameFloors/FrameFloor/InteriorFinish'>
      <sch:assert role='ERROR' test='Type[text()="gypsum board" or text()="gypsum composite board" or text()="plaster" or text()="wood" or text()="other" or text()="none"] or not(Type)'>Expected Type to be 'gypsum board' or 'gypsum composite board' or 'plaster' or 'wood' or 'other' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='number(Thickness) &gt;= 0 or not(Thickness)'>Expected Thickness to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/FrameFloors/FrameFloor/Insulation'>
      <sch:assert role='ERROR' test='number(AssemblyEffectiveRValue) &gt; 0 or not(AssemblyEffectiveRValue)'>Expected AssemblyEffectiveRValue to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Slabs/Slab'>
      <sch:assert role='ERROR' test='InteriorAdjacentTo[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(InteriorAdjacentTo)'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Thickness) &gt;= 0 or not(Thickness)'>Expected Thickness to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Perimeter) &gt;= 0 or not(Perimeter)'>Expected Perimeter to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(ExposedPerimeter) &gt;= 0 or not(ExposedPerimeter)'>Expected ExposedPerimeter to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(DepthBelowGrade) &gt;= 0 or not(DepthBelowGrade)'>Expected DepthBelowGrade to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Slabs/Slab/PerimeterInsulation/Layer'>
      <sch:assert role='ERROR' test='number(InsulationDepth) &gt;= 0 or not(InsulationDepth)'>Expected InsulationDepth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(NominalRValue) &gt;= 0 or not(NominalRValue)'>Expected NominalRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Slabs/Slab/UnderSlabInsulation/Layer'>
      <sch:assert role='ERROR' test='number(InsulationWidth) &gt;= 0 or not(InsulationWidth)'>Expected InsulationWidth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(NominalRValue) &gt;= 0 or not(NominalRValue)'>Expected NominalRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Windows/Window'>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='Orientation[text()="north" or text()="northwest" or text()="west" or text()="southwest" or text()="south" or text()="southeast" or text()="east" or text()="northeast"] or not(Orientation)'>Expected Orientation to be 'north' or 'northwest' or 'west' or 'southwest' or 'south' or 'southeast' or 'east' or 'northeast'</sch:assert>
      <sch:assert role='ERROR' test='GlassLayers[text()="single-pane" or text()="double-pane" or text()="triple-pane" or text()="multi-layered" or text()="glass block" or text()="other"] or not(GlassLayers)'>Expected GlassLayers to be 'single-pane' or 'double-pane' or 'triple-pane' or 'multi-layered' or 'glass block' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='GlassType[text()="clear" or text()="low-e" or text()="tinted" or text()="reflective" or text()="tinted/reflective" or text()="other"] or not(GlassType)'>Expected GlassType to be 'clear' or 'low-e' or 'tinted' or 'reflective' or 'tinted/reflective' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='GasFill[text()="air" or text()="argon" or text()="krypton" or text()="xenon" or text()="nitrogen" or text()="other"] or not(GasFill)'>Expected GasFill to be 'air' or 'argon' or 'krypton' or 'xenon' or 'nitrogen' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(UFactor) &gt; 0 or not(UFactor)'>Expected UFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(SHGC) &gt; 0 or not(SHGC)'>Expected SHGC to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(SHGC) &lt; 1 or not(SHGC)'>Expected SHGC to be less than 1</sch:assert>
      <sch:assert role='ERROR' test='number(FractionOperable) &gt;= 0 or not(FractionOperable)'>Expected FractionOperable to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionOperable) &lt;= 1 or not(FractionOperable)'>Expected FractionOperable to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToWall[@idref]) = count(AttachedToWall)'>Expected idref attribute for AttachedToWall</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Windows/Window/ExteriorShading'>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &gt;= 0 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &lt;= 1 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &gt;= 0 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &lt;= 1 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Windows/Window/InteriorShading'>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &gt;= 0 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &lt;= 1 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &gt;= 0 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &lt;= 1 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Windows/Window/StormWindow'>
      <sch:assert role='ERROR' test='GlassType[text()="clear" or text()="low-e" or text()="tinted" or text()="reflective" or text()="tinted/reflective" or text()="other"] or not(GlassType)'>Expected GlassType to be 'clear' or 'low-e' or 'tinted' or 'reflective' or 'tinted/reflective' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Windows/Window/Overhangs'>
      <sch:assert role='ERROR' test='number(Depth) &gt;= 0 or not(Depth)'>Expected Depth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(DistanceToTopOfWindow) &gt;= 0 or not(DistanceToTopOfWindow)'>Expected DistanceToTopOfWindow to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(DistanceToBottomOfWindow) &gt;= 0 or not(DistanceToBottomOfWindow)'>Expected DistanceToBottomOfWindow to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Skylights/Skylight'>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='GlassLayers[text()="single-pane" or text()="double-pane" or text()="triple-pane" or text()="multi-layered" or text()="glass block" or text()="other"] or not(GlassLayers)'>Expected GlassLayers to be 'single-pane' or 'double-pane' or 'triple-pane' or 'multi-layered' or 'glass block' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='GlassType[text()="clear" or text()="low-e" or text()="tinted" or text()="reflective" or text()="tinted/reflective" or text()="other"] or not(GlassType)'>Expected GlassType to be 'clear' or 'low-e' or 'tinted' or 'reflective' or 'tinted/reflective' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='GasFill[text()="air" or text()="argon" or text()="krypton" or text()="xenon" or text()="nitrogen" or text()="other"] or not(GasFill)'>Expected GasFill to be 'air' or 'argon' or 'krypton' or 'xenon' or 'nitrogen' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(UFactor) &gt; 0 or not(UFactor)'>Expected UFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(SHGC) &gt; 0 or not(SHGC)'>Expected SHGC to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(SHGC) &lt; 1 or not(SHGC)'>Expected SHGC to be less than 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToRoof[@idref]) = count(AttachedToRoof)'>Expected idref attribute for AttachedToRoof</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Skylights/Skylight/ExteriorShading'>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &gt;= 0 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &lt;= 1 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &gt;= 0 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &lt;= 1 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Skylights/Skylight/InteriorShading'>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &gt;= 0 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SummerShadingCoefficient) &lt;= 1 or not(SummerShadingCoefficient)'>Expected SummerShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &gt;= 0 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(WinterShadingCoefficient) &lt;= 1 or not(WinterShadingCoefficient)'>Expected WinterShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Skylights/Skylight/StormWindow'>
      <sch:assert role='ERROR' test='GlassType[text()="clear" or text()="low-e" or text()="tinted" or text()="reflective" or text()="tinted/reflective" or text()="other"] or not(GlassType)'>Expected GlassType to be 'clear' or 'low-e' or 'tinted' or 'reflective' or 'tinted/reflective' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Doors/Door'>
      <sch:assert role='ERROR' test='number(Area) &gt; 0 or not(Area)'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &gt;= 0 or not(Azimuth)'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Azimuth) &lt; 360 or not(Azimuth)'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='Orientation[text()="north" or text()="northwest" or text()="west" or text()="southwest" or text()="south" or text()="southeast" or text()="east" or text()="northeast"] or not(Orientation)'>Expected Orientation to be 'north' or 'northwest' or 'west' or 'southwest' or 'south' or 'southeast' or 'east' or 'northeast'</sch:assert>
      <sch:assert role='ERROR' test='number(RValue) &gt;= 0 or not(RValue)'>Expected RValue to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToWall[@idref]) = count(AttachedToWall)'>Expected idref attribute for AttachedToWall</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/HeatingSystem'>
      <sch:assert role='ERROR' test='HeatingSystemFuel[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(HeatingSystemFuel)'>Expected HeatingSystemFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(FractionHeatLoadServed) &gt;= 0 or not(FractionHeatLoadServed)'>Expected FractionHeatLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionHeatLoadServed) &lt;= 1 or not(FractionHeatLoadServed)'>Expected FractionHeatLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(DistributionSystem[@idref]) = count(DistributionSystem)'>Expected idref attribute for DistributionSystem</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/HeatingSystem/AnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='Units[text()="HSPF" or text()="COP" or text()="AFUE" or text()="Percent"] or not(Units)'>Expected Units to be 'HSPF' or 'COP' or 'AFUE' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/CoolingSystem'>
      <sch:assert role='ERROR' test='CoolingSystemType[text()="central air conditioner" or text()="mini-split" or text()="room air conditioner" or text()="evaporative cooler" or text()="chiller" or text()="cooling tower" or text()="packaged terminal air conditioner" or text()="other"] or not(CoolingSystemType)'>Expected CoolingSystemType to be 'central air conditioner' or 'mini-split' or 'room air conditioner' or 'evaporative cooler' or 'chiller' or 'cooling tower' or 'packaged terminal air conditioner' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='CoolingSystemFuel[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(CoolingSystemFuel)'>Expected CoolingSystemFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='CompressorType[text()="single stage" or text()="two stage" or text()="variable speed"] or not(CompressorType)'>Expected CompressorType to be 'single stage' or 'two stage' or 'variable speed'</sch:assert>
      <sch:assert role='ERROR' test='number(FractionCoolLoadServed) &gt;= 0 or not(FractionCoolLoadServed)'>Expected FractionCoolLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionCoolLoadServed) &lt;= 1 or not(FractionCoolLoadServed)'>Expected FractionCoolLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(SensibleHeatFraction) &gt;= 0 or not(SensibleHeatFraction)'>Expected SensibleHeatFraction to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SensibleHeatFraction) &lt;= 1 or not(SensibleHeatFraction)'>Expected SensibleHeatFraction to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(DistributionSystem[@idref]) = count(DistributionSystem)'>Expected idref attribute for DistributionSystem</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/CoolingSystem/AnnualCoolingEfficiency'>
      <sch:assert role='ERROR' test='Units[text()="SEER" or text()="CEER" or text()="EER" or text()="COP" or text()="kW/ton"] or not(Units)'>Expected Units to be 'SEER' or 'CEER' or 'EER' or 'COP' or 'kW/ton'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/HeatPump'>
      <sch:assert role='ERROR' test='HeatPumpType[text()="water-to-air" or text()="water-to-water" or text()="air-to-air" or text()="air-to-water" or text()="mini-split" or text()="ground-to-air" or text()="ground-to-water" or text()="water-loop-to-air" or text()="variable refrigerant flow" or text()="packaged terminal heat pump" or text()="room heat pump"] or not(HeatPumpType)'>Expected HeatPumpType to be 'water-to-air' or 'water-to-water' or 'air-to-air' or 'air-to-water' or 'mini-split' or 'ground-to-air' or 'ground-to-water' or 'water-loop-to-air' or 'variable refrigerant flow' or 'packaged terminal heat pump' or 'room heat pump'</sch:assert>
      <sch:assert role='ERROR' test='HeatPumpFuel[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(HeatPumpFuel)'>Expected HeatPumpFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='CompressorType[text()="single stage" or text()="two stage" or text()="variable speed"] or not(CompressorType)'>Expected CompressorType to be 'single stage' or 'two stage' or 'variable speed'</sch:assert>
      <sch:assert role='ERROR' test='number(CoolingSensibleHeatFraction) &gt;= 0 or not(CoolingSensibleHeatFraction)'>Expected CoolingSensibleHeatFraction to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(CoolingSensibleHeatFraction) &lt;= 1 or not(CoolingSensibleHeatFraction)'>Expected CoolingSensibleHeatFraction to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='BackupType[text()="integrated" or text()="separate"] or not(BackupType)'>Expected BackupType to be 'integrated' or 'separate'</sch:assert>
      <sch:assert role='ERROR' test='BackupSystemFuel[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(BackupSystemFuel)'>Expected BackupSystemFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(FractionHeatLoadServed) &gt;= 0 or not(FractionHeatLoadServed)'>Expected FractionHeatLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionHeatLoadServed) &lt;= 1 or not(FractionHeatLoadServed)'>Expected FractionHeatLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(FractionCoolLoadServed) &gt;= 0 or not(FractionCoolLoadServed)'>Expected FractionCoolLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionCoolLoadServed) &lt;= 1 or not(FractionCoolLoadServed)'>Expected FractionCoolLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(DistributionSystem[@idref]) = count(DistributionSystem)'>Expected idref attribute for DistributionSystem</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/HeatPump/BackupAnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='Units[text()="HSPF" or text()="COP" or text()="AFUE" or text()="Percent"] or not(Units)'>Expected Units to be 'HSPF' or 'COP' or 'AFUE' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/HeatPump/AnnualCoolingEfficiency'>
      <sch:assert role='ERROR' test='Units[text()="SEER" or text()="CEER" or text()="EER" or text()="COP" or text()="kW/ton"] or not(Units)'>Expected Units to be 'SEER' or 'CEER' or 'EER' or 'COP' or 'kW/ton'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACPlant/HeatPump/AnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='Units[text()="HSPF" or text()="COP" or text()="AFUE" or text()="Percent"] or not(Units)'>Expected Units to be 'HSPF' or 'COP' or 'AFUE' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACControl'>
      <sch:assert role='ERROR' test='ControlType[text()="programmable thermostat" or text()="manual thermostat" or text()="digital thermostat" or text()="timer" or text()="EMCS" or text()="other"] or not(ControlType)'>Expected ControlType to be 'programmable thermostat' or 'manual thermostat' or 'digital thermostat' or 'timer' or 'EMCS' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACControl/HeatingSeason'>
      <sch:assert role='ERROR' test='number(BeginMonth) &gt;= 1 or not(BeginMonth)'>Expected BeginMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(BeginMonth) &lt;= 12 or not(BeginMonth)'>Expected BeginMonth to be less than or equal to 12</sch:assert>
      <sch:assert role='ERROR' test='number(BeginDayOfMonth) &gt;= 1 or not(BeginDayOfMonth)'>Expected BeginDayOfMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(BeginDayOfMonth) &lt;= 31 or not(BeginDayOfMonth)'>Expected BeginDayOfMonth to be less than or equal to 31</sch:assert>
      <sch:assert role='ERROR' test='number(EndMonth) &gt;= 1 or not(EndMonth)'>Expected EndMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(EndMonth) &lt;= 12 or not(EndMonth)'>Expected EndMonth to be less than or equal to 12</sch:assert>
      <sch:assert role='ERROR' test='number(EndDayOfMonth) &gt;= 1 or not(EndDayOfMonth)'>Expected EndDayOfMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(EndDayOfMonth) &lt;= 31 or not(EndDayOfMonth)'>Expected EndDayOfMonth to be less than or equal to 31</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACControl/CoolingSeason'>
      <sch:assert role='ERROR' test='number(BeginMonth) &gt;= 1 or not(BeginMonth)'>Expected BeginMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(BeginMonth) &lt;= 12 or not(BeginMonth)'>Expected BeginMonth to be less than or equal to 12</sch:assert>
      <sch:assert role='ERROR' test='number(BeginDayOfMonth) &gt;= 1 or not(BeginDayOfMonth)'>Expected BeginDayOfMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(BeginDayOfMonth) &lt;= 31 or not(BeginDayOfMonth)'>Expected BeginDayOfMonth to be less than or equal to 31</sch:assert>
      <sch:assert role='ERROR' test='number(EndMonth) &gt;= 1 or not(EndMonth)'>Expected EndMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(EndMonth) &lt;= 12 or not(EndMonth)'>Expected EndMonth to be less than or equal to 12</sch:assert>
      <sch:assert role='ERROR' test='number(EndDayOfMonth) &gt;= 1 or not(EndDayOfMonth)'>Expected EndDayOfMonth to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(EndDayOfMonth) &lt;= 31 or not(EndDayOfMonth)'>Expected EndDayOfMonth to be less than or equal to 31</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACDistribution/DistributionSystemType/AirDistribution'>
      <sch:assert role='ERROR' test='AirDistributionType[text()="regular velocity" or text()="high velocity" or text()="gravity" or text()="fan coil"] or not(AirDistributionType)'>Expected AirDistributionType to be 'regular velocity' or 'high velocity' or 'gravity' or 'fan coil'</sch:assert>
      <sch:assert role='ERROR' test='number(NumberofReturnRegisters) &gt;= 0 or not(NumberofReturnRegisters)'>Expected NumberofReturnRegisters to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACDistribution/DistributionSystemType/AirDistribution/DuctLeakageMeasurement'>
      <sch:assert role='ERROR' test='DuctType[text()="supply" or text()="return"] or not(DuctType)'>Expected DuctType to be 'supply' or 'return'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACDistribution/DistributionSystemType/AirDistribution/DuctLeakageMeasurement/DuctLeakage'>
      <sch:assert role='ERROR' test='Units[text()="CFM50" or text()="CFM25" or text()="CFM per Std 152" or text()="Percent"] or not(Units)'>Expected Units to be 'CFM50' or 'CFM25' or 'CFM per Std 152' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='TotalOrToOutside[text()="to outside" or text()="total"] or not(TotalOrToOutside)'>Expected TotalOrToOutside to be 'to outside' or 'total'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACDistribution/DistributionSystemType/AirDistribution/Ducts'>
      <sch:assert role='ERROR' test='DuctType[text()="supply" or text()="return"] or not(DuctType)'>Expected DuctType to be 'supply' or 'return'</sch:assert>
      <sch:assert role='ERROR' test='number(DuctInsulationRValue) &gt;= 0 or not(DuctInsulationRValue)'>Expected DuctInsulationRValue to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='DuctLocation[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="exterior wall" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="interstitial space" or text()="living space" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="roof deck" or text()="unconditioned space" or text()="under slab"] or not(DuctLocation)'>Expected DuctLocation to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'exterior wall' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'interstitial space' or 'living space' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'roof deck' or 'unconditioned space' or 'under slab'</sch:assert>
      <sch:assert role='ERROR' test='number(FractionDuctArea) &gt;= 0 or not(FractionDuctArea)'>Expected FractionDuctArea to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionDuctArea) &lt;= 1 or not(FractionDuctArea)'>Expected FractionDuctArea to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(DuctSurfaceArea) &gt; 0 or not(DuctSurfaceArea)'>Expected DuctSurfaceArea to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACDistribution/DistributionSystemType/HydronicDistribution'>
      <sch:assert role='ERROR' test='HydronicDistributionType[text()="radiator" or text()="baseboard" or text()="radiant floor" or text()="radiant ceiling" or text()="water loop" or text()="other"] or not(HydronicDistributionType)'>Expected HydronicDistributionType to be 'radiator' or 'baseboard' or 'radiant floor' or 'radiant ceiling' or 'water loop' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/HVAC/HVACDistribution'>
      <sch:assert role='ERROR' test='number(ConditionedFloorAreaServed) &gt; 0 or not(ConditionedFloorAreaServed)'>Expected ConditionedFloorAreaServed to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(AnnualHeatingDistributionSystemEfficiency) &gt;= 0 or not(AnnualHeatingDistributionSystemEfficiency)'>Expected AnnualHeatingDistributionSystemEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(AnnualHeatingDistributionSystemEfficiency) &lt;= 1 or not(AnnualHeatingDistributionSystemEfficiency)'>Expected AnnualHeatingDistributionSystemEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(AnnualCoolingDistributionSystemEfficiency) &gt;= 0 or not(AnnualCoolingDistributionSystemEfficiency)'>Expected AnnualCoolingDistributionSystemEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(AnnualCoolingDistributionSystemEfficiency) &lt;= 1 or not(AnnualCoolingDistributionSystemEfficiency)'>Expected AnnualCoolingDistributionSystemEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/MechanicalVentilation/VentilationFans/VentilationFan'>
      <sch:assert role='ERROR' test='number(Quantity) &gt; 0 or not(Quantity)'>Expected Quantity to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='FanType[text()="exhaust only" or text()="supply only" or text()="heat recovery ventilator" or text()="energy recovery ventilator" or text()="balanced" or text()="central fan integrated supply"] or not(FanType)'>Expected FanType to be 'exhaust only' or 'supply only' or 'heat recovery ventilator' or 'energy recovery ventilator' or 'balanced' or 'central fan integrated supply'</sch:assert>
      <sch:assert role='ERROR' test='number(HoursInOperation) &gt;= 0 or not(HoursInOperation)'>Expected HoursInOperation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(HoursInOperation) &lt;= 24 or not(HoursInOperation)'>Expected HoursInOperation to be less than or equal to 24</sch:assert>
      <sch:assert role='ERROR' test='FanLocation[text()="bath" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="hallway" or text()="kitchen" or text()="other"] or not(FanLocation)'>Expected FanLocation to be 'bath' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'hallway' or 'kitchen' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(FractionRecirculation) &gt;= 0 or not(FractionRecirculation)'>Expected FractionRecirculation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionRecirculation) &lt;= 1 or not(FractionRecirculation)'>Expected FractionRecirculation to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(TotalRecoveryEfficiency) &gt;= 0 or not(TotalRecoveryEfficiency)'>Expected TotalRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(TotalRecoveryEfficiency) &lt;= 1 or not(TotalRecoveryEfficiency)'>Expected TotalRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(SensibleRecoveryEfficiency) &gt;= 0 or not(SensibleRecoveryEfficiency)'>Expected SensibleRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SensibleRecoveryEfficiency) &lt;= 1 or not(SensibleRecoveryEfficiency)'>Expected SensibleRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(AdjustedTotalRecoveryEfficiency) &gt;= 0 or not(AdjustedTotalRecoveryEfficiency)'>Expected AdjustedTotalRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(AdjustedTotalRecoveryEfficiency) &lt;= 1 or not(AdjustedTotalRecoveryEfficiency)'>Expected AdjustedTotalRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(AdjustedSensibleRecoveryEfficiency) &gt;= 0 or not(AdjustedSensibleRecoveryEfficiency)'>Expected AdjustedSensibleRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(AdjustedSensibleRecoveryEfficiency) &lt;= 1 or not(AdjustedSensibleRecoveryEfficiency)'>Expected AdjustedSensibleRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToHVACDistributionSystem[@idref]) = count(AttachedToHVACDistributionSystem)'>Expected idref attribute for AttachedToHVACDistributionSystem</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/WaterHeatingSystem'>
      <sch:assert role='ERROR' test='FuelType[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(FuelType)'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='WaterHeaterType[text()="storage water heater" or text()="dedicated boiler with storage tank" or text()="instantaneous water heater" or text()="heat pump water heater" or text()="space-heating boiler with storage tank" or text()="space-heating boiler with tankless coil"] or not(WaterHeaterType)'>Expected WaterHeaterType to be 'storage water heater' or 'dedicated boiler with storage tank' or 'instantaneous water heater' or 'heat pump water heater' or 'space-heating boiler with storage tank' or 'space-heating boiler with tankless coil'</sch:assert>
      <sch:assert role='ERROR' test='Location[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="living space" or text()="mechanical closet" or text()="other exterior" or text()="other heated space" or text()="other housing unit" or text()="other interior" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="roof deck" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'living space' or 'mechanical closet' or 'other exterior' or 'other heated space' or 'other housing unit' or 'other interior' or 'other multifamily buffer space' or 'other non-freezing space' or 'roof deck' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(PerformanceAdjustment) &gt;= 0 or not(PerformanceAdjustment)'>Expected PerformanceAdjustment to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(PerformanceAdjustment) &lt;= 1 or not(PerformanceAdjustment)'>Expected PerformanceAdjustment to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(TankVolume) &gt; 0 or not(TankVolume)'>Expected TankVolume to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionDHWLoadServed) &gt;= 0 or not(FractionDHWLoadServed)'>Expected FractionDHWLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionDHWLoadServed) &lt;= 1 or not(FractionDHWLoadServed)'>Expected FractionDHWLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(EnergyFactor) &lt;= 5 or not(EnergyFactor)'>Expected EnergyFactor to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='number(EnergyFactor) &gt; 0 or not(EnergyFactor)'>Expected EnergyFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(UniformEnergyFactor) &lt;= 5 or not(UniformEnergyFactor)'>Expected UniformEnergyFactor to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='number(UniformEnergyFactor) &gt; 0 or not(UniformEnergyFactor)'>Expected UniformEnergyFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(FirstHourRating) &gt; 0 or not(FirstHourRating)'>Expected FirstHourRating to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='UsageBin[text()="very small" or text()="low" or text()="medium" or text()="high"] or not(UsageBin)'>Expected UsageBin to be 'very small' or 'low' or 'medium' or 'high'</sch:assert>
      <sch:assert role='ERROR' test='number(RecoveryEfficiency) &lt;= 5 or not(RecoveryEfficiency)'>Expected RecoveryEfficiency to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='number(RecoveryEfficiency) &gt; 0 or not(RecoveryEfficiency)'>Expected RecoveryEfficiency to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(RelatedHVACSystem[@idref]) = count(RelatedHVACSystem)'>Expected idref attribute for RelatedHVACSystem</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/WaterHeatingSystem/WaterHeaterInsulation/Jacket'>
      <sch:assert role='ERROR' test='number(JacketRValue) &gt;= 0 or not(JacketRValue)'>Expected JacketRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/HotWaterDistribution/SystemType/Standard'>
      <sch:assert role='ERROR' test='number(PipingLength) &gt;= 0 or not(PipingLength)'>Expected PipingLength to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/HotWaterDistribution/SystemType/Recirculation'>
      <sch:assert role='ERROR' test='ControlType[text()="no control" or text()="timer" or text()="temperature" or text()="presence sensor demand control" or text()="manual demand control"] or not(ControlType)'>Expected ControlType to be 'no control' or 'timer' or 'temperature' or 'presence sensor demand control' or 'manual demand control'</sch:assert>
      <sch:assert role='ERROR' test='number(RecirculationPipingLoopLength) &gt;= 0 or not(RecirculationPipingLoopLength)'>Expected RecirculationPipingLoopLength to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(BranchPipingLoopLength) &gt;= 0 or not(BranchPipingLoopLength)'>Expected BranchPipingLoopLength to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(PumpPower) &gt;= 0 or not(PumpPower)'>Expected PumpPower to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/HotWaterDistribution/PipeInsulation'>
      <sch:assert role='ERROR' test='number(PipeRValue) &gt;= 0 or not(PipeRValue)'>Expected PipeRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/HotWaterDistribution/DrainWaterHeatRecovery'>
      <sch:assert role='ERROR' test='FacilitiesConnected[text()="one" or text()="all"] or not(FacilitiesConnected)'>Expected FacilitiesConnected to be 'one' or 'all'</sch:assert>
      <sch:assert role='ERROR' test='number(Efficiency) &gt;= 0 or not(Efficiency)'>Expected Efficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(Efficiency) &lt;= 1 or not(Efficiency)'>Expected Efficiency to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/WaterFixture'>
      <sch:assert role='ERROR' test='WaterFixtureType[text()="faucet" or text()="shower head" or text()="other"] or not(WaterFixtureType)'>Expected WaterFixtureType to be 'faucet' or 'shower head' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/SolarThermal/SolarThermalSystem'>
      <sch:assert role='ERROR' test='SystemType[text()="hot water" or text()="hot water and space heating" or text()="space heating" or text()="hybrid system"] or not(SystemType)'>Expected SystemType to be 'hot water' or 'hot water and space heating' or 'space heating' or 'hybrid system'</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorArea) &gt; 0 or not(CollectorArea)'>Expected CollectorArea to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='CollectorLoopType[text()="air direct" or text()="air indirect" or text()="liquid direct" or text()="liquid indirect" or text()="passive thermosyphon"] or not(CollectorLoopType)'>Expected CollectorLoopType to be 'air direct' or 'air indirect' or 'liquid direct' or 'liquid indirect' or 'passive thermosyphon'</sch:assert>
      <sch:assert role='ERROR' test='CollectorType[text()="single glazing black" or text()="single glazing selective" or text()="double glazing black" or text()="double glazing selective" or text()="evacuated tube" or text()="integrated collector storage"] or not(CollectorType)'>Expected CollectorType to be 'single glazing black' or 'single glazing selective' or 'double glazing black' or 'double glazing selective' or 'evacuated tube' or 'integrated collector storage'</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorAzimuth) &gt;= 0 or not(CollectorAzimuth)'>Expected CollectorAzimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorAzimuth) &lt; 360 or not(CollectorAzimuth)'>Expected CollectorAzimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorTilt) &gt;= 0 or not(CollectorTilt)'>Expected CollectorTilt to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorTilt) &lt;= 90 or not(CollectorTilt)'>Expected CollectorTilt to be less than or equal to 90</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorRatedOpticalEfficiency) &gt; 0 or not(CollectorRatedOpticalEfficiency)'>Expected CollectorRatedOpticalEfficiency to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorRatedOpticalEfficiency) &lt; 1 or not(CollectorRatedOpticalEfficiency)'>Expected CollectorRatedOpticalEfficiency to be less than 1</sch:assert>
      <sch:assert role='ERROR' test='number(CollectorRatedThermalLosses) &gt; 0 or not(CollectorRatedThermalLosses)'>Expected CollectorRatedThermalLosses to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(StorageVolume) &gt; 0 or not(StorageVolume)'>Expected StorageVolume to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(SolarFraction) &lt;= 1 or not(SolarFraction)'>Expected SolarFraction to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(SolarFraction) &gt; 0 or not(SolarFraction)'>Expected SolarFraction to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(ConnectedTo[@idref]) = count(ConnectedTo)'>Expected idref attribute for ConnectedTo</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/Photovoltaics/PVSystem'>
      <sch:assert role='ERROR' test='Location[text()="roof" or text()="ground" or text()="other"] or not(Location)'>Expected Location to be 'roof' or 'ground' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='ModuleType[text()="standard" or text()="premium" or text()="thin film"] or not(ModuleType)'>Expected ModuleType to be 'standard' or 'premium' or 'thin film'</sch:assert>
      <sch:assert role='ERROR' test='Tracking[text()="fixed" or text()="1-axis" or text()="1-axis backtracked" or text()="2-axis"] or not(Tracking)'>Expected Tracking to be 'fixed' or '1-axis' or '1-axis backtracked' or '2-axis'</sch:assert>
      <sch:assert role='ERROR' test='number(ArrayAzimuth) &gt;= 0 or not(ArrayAzimuth)'>Expected ArrayAzimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(ArrayAzimuth) &lt; 360 or not(ArrayAzimuth)'>Expected ArrayAzimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='number(ArrayTilt) &gt;= 0 or not(ArrayTilt)'>Expected ArrayTilt to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(ArrayTilt) &lt;= 90 or not(ArrayTilt)'>Expected ArrayTilt to be less than or equal to 90</sch:assert>
      <sch:assert role='ERROR' test='number(MaxPowerOutput) &gt;= 0 or not(MaxPowerOutput)'>Expected MaxPowerOutput to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(InverterEfficiency) &gt;= 0 or not(InverterEfficiency)'>Expected InverterEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(InverterEfficiency) &lt;= 1 or not(InverterEfficiency)'>Expected InverterEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(SystemLossesFraction) &gt;= 0 or not(SystemLossesFraction)'>Expected SystemLossesFraction to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(SystemLossesFraction) &lt;= 1 or not(SystemLossesFraction)'>Expected SystemLossesFraction to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/Batteries/Battery'>
      <sch:assert role='ERROR' test='Location[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="exterior wall" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="living space" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="roof deck" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'exterior wall' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'living space' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'roof deck' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='BatteryType[text()="Li-ion" or text()="lead acid" or text()="Ni-Cd" or text()="salt water" or text()="other"] or not(BatteryType)'>Expected BatteryType to be 'Li-ion' or 'lead acid' or 'Ni-Cd' or 'salt water' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(RatedPowerOutput) &gt;= 0 or not(RatedPowerOutput)'>Expected RatedPowerOutput to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/Batteries/Battery/NominalCapacity'>
      <sch:assert role='ERROR' test='Units[text()="kWh" or text()="Ah"] or not(Units)'>Expected Units to be 'kWh' or 'Ah'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/Batteries/Battery/UsableCapacity'>
      <sch:assert role='ERROR' test='Units[text()="kWh" or text()="Ah"] or not(Units)'>Expected Units to be 'kWh' or 'Ah'</sch:assert>
      <sch:assert role='ERROR' test='number(Value) &gt;= 0 or not(Value)'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/ClothesWasher'>
      <sch:assert role='ERROR' test='Location[text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="laundry room" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'laundry room' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(RatedAnnualkWh) &gt; 0 or not(RatedAnnualkWh)'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/ClothesDryer'>
      <sch:assert role='ERROR' test='Location[text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="laundry room" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'laundry room' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='FuelType[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(FuelType)'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='number(VentedFlowRate) &gt;= 0 or not(VentedFlowRate)'>Expected VentedFlowRate to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/Dishwasher'>
      <sch:assert role='ERROR' test='Location[text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="kitchen" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(RatedAnnualkWh) &gt; 0 or not(RatedAnnualkWh)'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(EnergyFactor) &lt;= 5 or not(EnergyFactor)'>Expected EnergyFactor to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='number(EnergyFactor) &gt; 0 or not(EnergyFactor)'>Expected EnergyFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='number(PlaceSettingCapacity) &gt; 0 or not(PlaceSettingCapacity)'>Expected PlaceSettingCapacity to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/Refrigerator'>
      <sch:assert role='ERROR' test='Location[text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="kitchen" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(RatedAnnualkWh) &gt; 0 or not(RatedAnnualkWh)'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/Freezer'>
      <sch:assert role='ERROR' test='Location[text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="kitchen" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(RatedAnnualkWh) &gt; 0 or not(RatedAnnualkWh)'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/Dehumidifier'>
      <sch:assert role='ERROR' test='Type[text()="portable" or text()="whole-home"] or not(Type)'>Expected Type to be 'portable' or 'whole-home'</sch:assert>
      <sch:assert role='ERROR' test='Location[text()="attic" or text()="attic - conditioned" or text()="attic - unconditioned" or text()="attic - unvented" or text()="attic - vented" or text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="crawlspace" or text()="crawlspace - conditioned" or text()="crawlspace - unconditioned" or text()="crawlspace - unvented" or text()="crawlspace - vented" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="ground" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other housing unit above" or text()="other housing unit below" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="outside" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='number(DehumidistatSetpoint) &gt;= 0 or not(DehumidistatSetpoint)'>Expected DehumidistatSetpoint to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(DehumidistatSetpoint) &lt;= 1 or not(DehumidistatSetpoint)'>Expected DehumidistatSetpoint to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='number(FractionDehumidificationLoadServed) &gt;= 0 or not(FractionDehumidificationLoadServed)'>Expected FractionDehumidificationLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionDehumidificationLoadServed) &lt;= 1 or not(FractionDehumidificationLoadServed)'>Expected FractionDehumidificationLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/CookingRange'>
      <sch:assert role='ERROR' test='Location[text()="basement" or text()="basement - conditioned" or text()="basement - unconditioned" or text()="garage" or text()="garage - conditioned" or text()="garage - unconditioned" or text()="kitchen" or text()="living space" or text()="other" or text()="other heated space" or text()="other housing unit" or text()="other multifamily buffer space" or text()="other non-freezing space" or text()="unconditioned space"] or not(Location)'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='FuelType[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(FuelType)'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Lighting/LightingGroup'>
      <sch:assert role='ERROR' test='Location[text()="interior" or text()="exterior" or text()="garage" or text()="common area"] or not(Location)'>Expected Location to be 'interior' or 'exterior' or 'garage' or 'common area'</sch:assert>
      <sch:assert role='ERROR' test='number(FractionofUnitsInLocation) &gt;= 0 or not(FractionofUnitsInLocation)'>Expected FractionofUnitsInLocation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='number(FractionofUnitsInLocation) &lt;= 1 or not(FractionofUnitsInLocation)'>Expected FractionofUnitsInLocation to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Lighting/CeilingFan/Airflow'>
      <sch:assert role='ERROR' test='FanSpeed[text()="low" or text()="medium" or text()="high"] or not(FanSpeed)'>Expected FanSpeed to be 'low' or 'medium' or 'high'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Lighting/CeilingFan'>
      <sch:assert role='ERROR' test='number(Quantity) &gt; 0 or not(Quantity)'>Expected Quantity to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Pools/Pool'>
      <sch:assert role='ERROR' test='Type[text()="in ground" or text()="on ground" or text()="above ground" or text()="other" or text()="unknown" or text()="none"] or not(Type)'>Expected Type to be 'in ground' or 'on ground' or 'above ground' or 'other' or 'unknown' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Pools/Pool/PoolPumps/PoolPump'>
      <sch:assert role='ERROR' test='Type[text()="single speed" or text()="multi speed" or text()="variable speed" or text()="variable flow" or text()="other" or text()="unknown" or text()="none"] or not(Type)'>Expected Type to be 'single speed' or 'multi speed' or 'variable speed' or 'variable flow' or 'other' or 'unknown' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Pools/Pool/PoolPumps/PoolPump/Load'>
      <sch:assert role='ERROR' test='Units[text()="kWh/year" or text()="W"] or not(Units)'>Expected Units to be 'kWh/year' or 'W'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Pools/Pool/Heater'>
      <sch:assert role='ERROR' test='Type[text()="gas fired" or text()="electric resistance" or text()="heat pump" or text()="solar" or text()="other" or text()="unknown" or text()="none"] or not(Type)'>Expected Type to be 'gas fired' or 'electric resistance' or 'heat pump' or 'solar' or 'other' or 'unknown' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Pools/Pool/Heater/Load'>
      <sch:assert role='ERROR' test='Units[text()="kWh/year" or text()="therm/year" or text()="W" or text()="Btuh"] or not(Units)'>Expected Units to be 'kWh/year' or 'therm/year' or 'W' or 'Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/HotTubs/HotTub'>
      <sch:assert role='ERROR' test='Type[text()="in ground" or text()="on ground" or text()="above ground" or text()="other" or text()="unknown" or text()="none"] or not(Type)'>Expected Type to be 'in ground' or 'on ground' or 'above ground' or 'other' or 'unknown' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/HotTubs/HotTub/HotTubPumps/HotTubPump'>
      <sch:assert role='ERROR' test='Type[text()="single speed" or text()="multi speed" or text()="variable speed" or text()="variable flow" or text()="other" or text()="unknown" or text()="none"] or not(Type)'>Expected Type to be 'single speed' or 'multi speed' or 'variable speed' or 'variable flow' or 'other' or 'unknown' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/HotTubs/HotTub/HotTubPumps/HotTubPump/Load'>
      <sch:assert role='ERROR' test='Units[text()="kWh/year" or text()="W"] or not(Units)'>Expected Units to be 'kWh/year' or 'W'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/HotTubs/HotTub/Heater'>
      <sch:assert role='ERROR' test='Type[text()="gas fired" or text()="electric resistance" or text()="heat pump" or text()="solar" or text()="other" or text()="unknown" or text()="none"] or not(Type)'>Expected Type to be 'gas fired' or 'electric resistance' or 'heat pump' or 'solar' or 'other' or 'unknown' or 'none'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/HotTubs/HotTub/Heater/Load'>
      <sch:assert role='ERROR' test='Units[text()="kWh/year" or text()="therm/year" or text()="W" or text()="Btuh"] or not(Units)'>Expected Units to be 'kWh/year' or 'therm/year' or 'W' or 'Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/MiscLoads/PlugLoad'>
      <sch:assert role='ERROR' test='PlugLoadType[text()="TV plasma" or text()="TV CRT" or text()="TV other" or text()="computer" or text()="space heater" or text()="water bed" or text()="aquarium" or text()="electric vehicle charging" or text()="well pump" or text()="sauna" or text()="other"] or not(PlugLoadType)'>Expected PlugLoadType to be 'TV plasma' or 'TV CRT' or 'TV other' or 'computer' or 'space heater' or 'water bed' or 'aquarium' or 'electric vehicle charging' or 'well pump' or 'sauna' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/MiscLoads/PlugLoad/Load'>
      <sch:assert role='ERROR' test='Units[text()="kWh/year" or text()="W"] or not(Units)'>Expected Units to be 'kWh/year' or 'W'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/MiscLoads/FuelLoad'>
      <sch:assert role='ERROR' test='FuelLoadType[text()="grill" or text()="lighting" or text()="fireplace" or text()="other"] or not(FuelLoadType)'>Expected FuelLoadType to be 'grill' or 'lighting' or 'fireplace' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='FuelType[text()="electricity" or text()="renewable electricity" or text()="natural gas" or text()="renewable natural gas" or text()="fuel oil" or text()="fuel oil 1" or text()="fuel oil 2" or text()="fuel oil 4" or text()="fuel oil 5/6" or text()="district steam" or text()="district hot water" or text()="district chilled water" or text()="solar hot water" or text()="propane" or text()="kerosene" or text()="diesel" or text()="coal" or text()="anthracite coal" or text()="bituminous coal" or text()="coke" or text()="wood" or text()="wood pellets" or text()="combination" or text()="other"] or not(FuelType)'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/MiscLoads/FuelLoad/Load'>
      <sch:assert role='ERROR' test='Units[text()="therm/year" or text()="Btuh"] or not(Units)'>Expected Units to be 'therm/year' or 'Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building'>
      <sch:assert role='ERROR' test='count(BuildingID[@id]) = 1'>Expected BuildingID with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/ClimateandRiskZones/WeatherStation'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Attics/Attic'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToRoof[@idref]) = count(AttachedToRoof)'>Expected idref attribute for AttachedToRoof</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToWall[@idref]) = count(AttachedToWall)'>Expected idref attribute for AttachedToWall</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToFrameFloor[@idref]) = count(AttachedToFrameFloor)'>Expected idref attribute for AttachedToFrameFloor</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Foundations/Foundation'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToRimJoist[@idref]) = count(AttachedToRimJoist)'>Expected idref attribute for AttachedToRimJoist</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToFoundationWall[@idref]) = count(AttachedToFoundationWall)'>Expected idref attribute for AttachedToFoundationWall</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToSlab[@idref]) = count(AttachedToSlab)'>Expected idref attribute for AttachedToSlab</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToFrameFloor[@idref]) = count(AttachedToFrameFloor)'>Expected idref attribute for AttachedToFrameFloor</sch:assert>
      <sch:assert role='ERROR' test='count(AttachedToWall[@idref]) = count(AttachedToWall)'>Expected idref attribute for AttachedToWall</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Slabs/Slab/PerimeterInsulation'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Enclosure/Slabs/Slab/UnderSlabInsulation'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Systems/WaterHeating/HotWaterDistribution'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
    <sch:rule context='/HPXML/Building/BuildingDetails/Appliances/Oven'>
      <sch:assert role='ERROR' test='count(SystemIdentifier[@id]) = 1'>Expected SystemIdentifier with id attribute</sch:assert>
    </sch:rule>
  </sch:pattern>
</sch:schema>
